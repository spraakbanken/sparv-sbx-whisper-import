name: test

on:
  push:
    branches:
      - main
  pull_request:
  merge_group:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  MINIMUM_PYTHON_VERSION: "3.11"
  UV_VERSION: "0.8.13"

jobs:
  coverage:
    # This action runs tests for coverage collection and uploads them to codecov.io.
    # This requires the secret `CODECOV_TOKEN` be set as secret on GitHub, both for
    # Actions and Dependabot

    name: "${{ matrix.os }} / ${{ matrix.python-version }} / coverage"
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        os: [ubuntu]
        python-version:
          # remove the unused versions
          - "3.11"
          - "3.12"
          - "3.13"

    runs-on: ${{ matrix.os }}-latest
    env:
      OS: ${{ matrix.os }}-latest
      PYTHON: ${{ matrix.python-version }}
      CS_ACCESS_TOKEN: ${{ secrets.CS_ACCESS_TOKEN }}
    steps:
      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v5.0.0
        with:
          persist-credentials: false
          submodules: true

      - name: Set up uv
        uses: astral-sh/setup-uv@4e1e303f7dafb1a3ec7770a507052543f593ad96 # v6.6.0
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true

      - name: Set up Python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Prepare assets
        run: make prepare-assets

      - uses: federicocarboni/setup-ffmpeg@37062fbf7149fc5578d6c57e08aed62458b375d6 # v3.1.0

      - name: Install dependencies
        run: make install-dev

      - name: sparv setup
        run: echo "" | .venv/bin/sparv setup

      - name: Run tests for coverage
        run: make test-w-coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@fdcc8476540edceab3de004e990f80d881c6cc00 # v5.5.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          # directory: ./coverage
          env_vars: OS,PYTHON
          fail_ci_if_error: true
          files: ./coverage.xml
          # flags: unittests
          # name: codecov-umbrella
          verbose: true
      - name: Install codescene coverage tool
        if: ${{ env.CS_ACCESS_TOKEN != '' }}
        run: curl https://downloads.codescene.io/enterprise/cli/install-cs-coverage-tool.sh | bash -s -- -y
      - name: Upload coverage data to CodeScene
        if: ${{ env.CS_ACCESS_TOKEN != '' }}
        run: cs-coverage upload --format "lcov" --metric "line-coverage" coverage.lcov
        env:
          CS_ACCESS_TOKEN: ${{ secrets.CS_ACCESS_TOKEN }}

  minimal:
    # This action chooses the oldest version of the dependencies permitted by Cargo.toml to ensure
    # that this crate is compatible with the minimal version that this crate and its dependencies
    # require. This will pickup issues where this create relies on functionality that was introduced
    # later than the actual version specified (e.g., when we choose just a major version, but a
    # method was added after this version).
    #

    runs-on: ubuntu-latest
    name: ubuntu / 3.11 / minimal-versions
    steps:
      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v5.0.0
        with:
          persist-credentials: false
          submodules: true

      - name: Set up uv
        uses: astral-sh/setup-uv@4e1e303f7dafb1a3ec7770a507052543f593ad96 # v6.6.0
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true

      - name: Set up Python ${{ env.MINIMUM_PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ env.MINIMUM_PYTHON_VERSION }}

      - uses: federicocarboni/setup-ffmpeg@37062fbf7149fc5578d6c57e08aed62458b375d6 # v3.1.0

      - name: install lowest direct dependencies
        run: uv sync --resolution lowest-direct --all-extras --all-packages --dev

      - name: Prepare assets
        run: make prepare-assets

      - name: sparv setup
        run: echo "" | .venv/bin/sparv setup

      - name: make test
        run: make test

  # https://github.com/marketplace/actions/alls-green#why used for branch protection checks
  test-check:
    if: always()
    needs:
      - coverage
      - minimal
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@05ac9388f0aebcb5727afa17fcccfecd6f8ec5fe # v1.2.2
        with:
          jobs: ${{ toJSON(needs) }}
